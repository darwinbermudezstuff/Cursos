@model Storage.Models.Assignment.AssignmentViewModels

@{
    Bussines.Product.ProductBussines.GetProductRequest request = new Bussines.Product.ProductBussines.GetProductRequest()
    {
        ProductID = (int)Model.Assignment.idProduct
    };
    var datas = Bussines.Product.ProductBussines.Select.GetProduct(request).Product;
    string code = datas.code;
    string name = datas.name;
}
@*<h1>
    New Inflow Register - @name (@code)
</h1>*@
<h3>@ViewBag.Message</h3>
<hr />
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-horizontal">

        <div class="form-horizontal">




            <div class="form-group">
                @Html.LabelFor(model => model.Transaction.amount, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Transaction.amount, new { htmlAttributes = new { @class = "form-control NewAmount" } })
                    @Html.ValidationMessageFor(model => model.Transaction.amount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Transaction.idConditionProduct, new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.DropDownListFor(m => m.Transaction.idConditionProduct, new SelectList(Model.ConditionProductList, "id", "name", 0), "Please Select Category", new { @class = "form-control ConditionSelect" })
                    @Html.ValidationMessageFor(model => model.Transaction.idConditionProduct, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.Label("actualAmount", "Current Stock", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    <div class="alert alert-info" role="alert"><label class="currentValue"> @Model.Assignment.amount</label></div>
                </div>
            </div>

            <div class="form-group ActualAmountValueAlert" style="display:none;">
                @Html.Label("actualAmount", "Actual Amount Condition", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    <div class="alert alert-info" role="alert"><label class="ActualAmountConditionValue" /></div>
                </div>
            </div>
            <div class="form-group ActualAmountValueAlert" style="display:none;">
                @Html.Label("actualAmount", "Current Amount", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    <div class="alert alert-info" role="alert"><label class="ActualAmountTotalValue" /></div>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("actualAmount", "Total Stock", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    <div class="alert alert-info" role="alert"><label class="totalAmount" /></div>
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Transaction.detail, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Transaction.detail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Transaction.detail, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Transaction.createDate, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Transaction.createDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Transaction.createDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Assignment.id)
                @Html.HiddenFor(model => model.Assignment.idProduct)

                @Html.HiddenFor(model => model.CategoryID)
                @Html.HiddenFor(model => model.CategoryIDFhater)
                @Html.HiddenFor(model => model.CellarArea)
                @Html.HiddenFor(model => model.Assignment.loan)
                @Html.HiddenFor(model => model.Assignment.amount)

                @Html.HiddenFor(model => model.Assignment.idCategory)
                @Html.HiddenFor(model => model.Assignment.createDate)
                @Html.HiddenFor(model => model.Assignment.state)
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>

    </div>
}
@if (Model.Error.Error)
{
    @Html.Partial("_ModalError", Model.Error)
}
else
{
    <table class="table table-striped table-bordered datatable" id="tableInformation2">
        <thead>

            <tr>
                <th>#</th>
                <th>Amount</th>
                <th>Product Condition</th>
                <th>Detail</th>
                <th>Date In</th>
            </tr>
        </thead><!-- table head -->
        <tbody>

            @{int j = 1;}
            @foreach (var item in Model.TransactionList)
            {
                <tr>
                    <td>@j</td>
                    <td>@item.amount</td>
                    <td>
                        @foreach (var items in Model.ConditionProductList)
                    {
                        if (items.id == item.idConditionProduct)
                        {
                                @items.name
                            }
                        }
                    </td>
                    <td>@item.detail</td>
                    <td>@item.createDate</td>
                </tr>
                j++;
            }
        </tbody>
            <tr>
                <th>Total</th>
                <th colspan="3">@Model.total</th>
            </tr>
</table>
                }


<script type="text/javascript">
    $(document).ready(function () {
        var ProductID = "";
        var ConditionID = "";

        $(".ConditionSelect").change(function () {
            ProductID = "@Model.Assignment.idProduct";
            ConditionID = "";
            $(".ConditionSelect option:selected").each(function () { ConditionID += $(this)[0].value; });
            console.log("Producto: " + ProductID + " \n Condicion: " + ConditionID);
            amountProduct(ProductID, ConditionID);
        });

        $(".NewAmount").blur(function (e) {
            newVal = $(this).val();
            currentValue = $(".currentValue").html();
            va = parseInt(newVal) + parseInt(currentValue);
            console.log(va);
            $(".totalAmount").html(va);
        });
    });




    function amountProduct(ProductID, conditionID) {
        if (ProductID.length > 0 && conditionID.length > 0) {
            var actionLink = '@Url.Action("ActualAmountByAssignment", "Assignment")';
            var cellarArea = '@Model.CellarArea';
            var url = actionLink + "?ProductID=" + ProductID + "&CellarArea=" + cellarArea + "&condition=" + conditionID + "&transactionType=" + 1;
            console.log(url);
            $.ajax({
                type: 'GET',
                url: url,
                async: false,
                beforeSend: function (xhr) {
                    if (xhr && xhr.overrideMimeType) {
                        xhr.overrideMimeType('application/json;charset=utf-8');
                    }
                },
                dataType: 'json',
                success: function (data) {
                    $(".ActualAmountValueAlert").show();
                    $(".ActualAmountConditionValue").html(data.AmountCondition);
                    $(".ActualAmountTotalValue").html(data.AmountTotal);
                }
            });
        }
    };




    $(document).ready(function () {
        $('#tableInformation2').dataTable({
            'aoColumns': [
                  { sWidth: "5%", bSearchable: false, bSortable: false },
                  { sWidth: "5%", bSearchable: true, bSortable: true },
                  { sWidth: "35%", bSearchable: true, bSortable: true },
                  { sWidth: "5%", bSearchable: false, bSortable: false },
                  { sWidth: "10%", bSearchable: false, bSortable: false },
            ],
            "info": true,
            "paging": true
        });
    });
</script>


